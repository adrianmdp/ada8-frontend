import{appendErrors as r}from"react-hook-form";import{validateFieldsNatively as o,toNestError as s}from"@hookform/resolvers";const e=(o,s)=>{const e={};for(;o.length;){const t=o[0],{code:a,message:n,path:i}=t,c=i.join(".");if(!e[c])if("unionErrors"in t){const r=t.unionErrors[0].errors[0];e[c]={message:r.message,type:r.code}}else e[c]={message:n,type:a};if("unionErrors"in t&&t.unionErrors.forEach(r=>r.errors.forEach(r=>o.push(r))),s){const o=e[c].types,n=o&&o[t.code];e[c]=r(c,s,e,a,n?[].concat(n,t.message):t.message)}o.shift()}return e},t=(r,t,a={})=>async(n,i,c)=>{try{const s=await r["sync"===a.mode?"parse":"parseAsync"](n,t);return c.shouldUseNativeValidation&&o({},c),{errors:{},values:s}}catch(r){return{values:{},errors:r.isEmpty?{}:s(e(r.errors,!c.shouldUseNativeValidation&&"all"===c.criteriaMode),c)}}};export{t as zodResolver};
//# sourceMappingURL=zod.modern.js.map
