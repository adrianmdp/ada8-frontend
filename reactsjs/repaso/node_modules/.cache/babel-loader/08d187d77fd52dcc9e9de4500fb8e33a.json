{"ast":null,"code":"import has from 'lodash/has'; // @ts-expect-error\n\nimport toposort from 'toposort';\nimport { split } from 'property-expr';\nimport Ref from '../Reference';\nimport isSchema from './isSchema';\nexport default function sortFields(fields, excludedEdges = []) {\n  let edges = [];\n  let nodes = new Set();\n  let excludes = new Set(excludedEdges.map(([a, b]) => `${a}-${b}`));\n\n  function addNode(depPath, key) {\n    let node = split(depPath)[0];\n    nodes.add(node);\n    if (!excludes.has(`${key}-${node}`)) edges.push([key, node]);\n  }\n\n  for (const key in fields) if (has(fields, key)) {\n    let value = fields[key];\n    nodes.add(key);\n    if (Ref.isRef(value) && value.isSibling) addNode(value.path, key);else if (isSchema(value) && 'deps' in value) value.deps.forEach(path => addNode(path, key));\n  }\n\n  return toposort.array(Array.from(nodes), edges).reverse();\n}","map":{"version":3,"sources":["/Users/adriansolimano/Documents/ada/repaso/node_modules/yup/es/util/sortFields.js"],"names":["has","toposort","split","Ref","isSchema","sortFields","fields","excludedEdges","edges","nodes","Set","excludes","map","a","b","addNode","depPath","key","node","add","push","value","isRef","isSibling","path","deps","forEach","array","Array","from","reverse"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,YAAhB,C,CAA8B;;AAE9B,OAAOC,QAAP,MAAqB,UAArB;AACA,SAASC,KAAT,QAAsB,eAAtB;AACA,OAAOC,GAAP,MAAgB,cAAhB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,eAAe,SAASC,UAAT,CAAoBC,MAApB,EAA4BC,aAAa,GAAG,EAA5C,EAAgD;AAC7D,MAAIC,KAAK,GAAG,EAAZ;AACA,MAAIC,KAAK,GAAG,IAAIC,GAAJ,EAAZ;AACA,MAAIC,QAAQ,GAAG,IAAID,GAAJ,CAAQH,aAAa,CAACK,GAAd,CAAkB,CAAC,CAACC,CAAD,EAAIC,CAAJ,CAAD,KAAa,GAAED,CAAE,IAAGC,CAAE,EAAxC,CAAR,CAAf;;AAEA,WAASC,OAAT,CAAiBC,OAAjB,EAA0BC,GAA1B,EAA+B;AAC7B,QAAIC,IAAI,GAAGhB,KAAK,CAACc,OAAD,CAAL,CAAe,CAAf,CAAX;AACAP,IAAAA,KAAK,CAACU,GAAN,CAAUD,IAAV;AACA,QAAI,CAACP,QAAQ,CAACX,GAAT,CAAc,GAAEiB,GAAI,IAAGC,IAAK,EAA5B,CAAL,EAAqCV,KAAK,CAACY,IAAN,CAAW,CAACH,GAAD,EAAMC,IAAN,CAAX;AACtC;;AAED,OAAK,MAAMD,GAAX,IAAkBX,MAAlB,EAA0B,IAAIN,GAAG,CAACM,MAAD,EAASW,GAAT,CAAP,EAAsB;AAC9C,QAAII,KAAK,GAAGf,MAAM,CAACW,GAAD,CAAlB;AACAR,IAAAA,KAAK,CAACU,GAAN,CAAUF,GAAV;AACA,QAAId,GAAG,CAACmB,KAAJ,CAAUD,KAAV,KAAoBA,KAAK,CAACE,SAA9B,EAAyCR,OAAO,CAACM,KAAK,CAACG,IAAP,EAAaP,GAAb,CAAP,CAAzC,KAAuE,IAAIb,QAAQ,CAACiB,KAAD,CAAR,IAAmB,UAAUA,KAAjC,EAAwCA,KAAK,CAACI,IAAN,CAAWC,OAAX,CAAmBF,IAAI,IAAIT,OAAO,CAACS,IAAD,EAAOP,GAAP,CAAlC;AAChH;;AAED,SAAOhB,QAAQ,CAAC0B,KAAT,CAAeC,KAAK,CAACC,IAAN,CAAWpB,KAAX,CAAf,EAAkCD,KAAlC,EAAyCsB,OAAzC,EAAP;AACD","sourcesContent":["import has from 'lodash/has'; // @ts-expect-error\n\nimport toposort from 'toposort';\nimport { split } from 'property-expr';\nimport Ref from '../Reference';\nimport isSchema from './isSchema';\nexport default function sortFields(fields, excludedEdges = []) {\n  let edges = [];\n  let nodes = new Set();\n  let excludes = new Set(excludedEdges.map(([a, b]) => `${a}-${b}`));\n\n  function addNode(depPath, key) {\n    let node = split(depPath)[0];\n    nodes.add(node);\n    if (!excludes.has(`${key}-${node}`)) edges.push([key, node]);\n  }\n\n  for (const key in fields) if (has(fields, key)) {\n    let value = fields[key];\n    nodes.add(key);\n    if (Ref.isRef(value) && value.isSibling) addNode(value.path, key);else if (isSchema(value) && 'deps' in value) value.deps.forEach(path => addNode(path, key));\n  }\n\n  return toposort.array(Array.from(nodes), edges).reverse();\n}"]},"metadata":{},"sourceType":"module"}