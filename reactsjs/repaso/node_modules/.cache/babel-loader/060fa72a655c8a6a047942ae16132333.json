{"ast":null,"code":"import Reference from '../Reference';\nexport default class ReferenceSet {\n  constructor() {\n    this.list = void 0;\n    this.refs = void 0;\n    this.list = new Set();\n    this.refs = new Map();\n  }\n\n  get size() {\n    return this.list.size + this.refs.size;\n  }\n\n  describe() {\n    const description = [];\n\n    for (const item of this.list) description.push(item);\n\n    for (const [, ref] of this.refs) description.push(ref.describe());\n\n    return description;\n  }\n\n  toArray() {\n    return Array.from(this.list).concat(Array.from(this.refs.values()));\n  }\n\n  resolveAll(resolve) {\n    return this.toArray().reduce((acc, e) => acc.concat(Reference.isRef(e) ? resolve(e) : e), []);\n  }\n\n  add(value) {\n    Reference.isRef(value) ? this.refs.set(value.key, value) : this.list.add(value);\n  }\n\n  delete(value) {\n    Reference.isRef(value) ? this.refs.delete(value.key) : this.list.delete(value);\n  }\n\n  clone() {\n    const next = new ReferenceSet();\n    next.list = new Set(this.list);\n    next.refs = new Map(this.refs);\n    return next;\n  }\n\n  merge(newItems, removeItems) {\n    const next = this.clone();\n    newItems.list.forEach(value => next.add(value));\n    newItems.refs.forEach(value => next.add(value));\n    removeItems.list.forEach(value => next.delete(value));\n    removeItems.refs.forEach(value => next.delete(value));\n    return next;\n  }\n\n}","map":{"version":3,"sources":["/Users/adriansolimano/Documents/ada/repaso/node_modules/yup/es/util/ReferenceSet.js"],"names":["Reference","ReferenceSet","constructor","list","refs","Set","Map","size","describe","description","item","push","ref","toArray","Array","from","concat","values","resolveAll","resolve","reduce","acc","e","isRef","add","value","set","key","delete","clone","next","merge","newItems","removeItems","forEach"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,cAAtB;AACA,eAAe,MAAMC,YAAN,CAAmB;AAChCC,EAAAA,WAAW,GAAG;AACZ,SAAKC,IAAL,GAAY,KAAK,CAAjB;AACA,SAAKC,IAAL,GAAY,KAAK,CAAjB;AACA,SAAKD,IAAL,GAAY,IAAIE,GAAJ,EAAZ;AACA,SAAKD,IAAL,GAAY,IAAIE,GAAJ,EAAZ;AACD;;AAEO,MAAJC,IAAI,GAAG;AACT,WAAO,KAAKJ,IAAL,CAAUI,IAAV,GAAiB,KAAKH,IAAL,CAAUG,IAAlC;AACD;;AAEDC,EAAAA,QAAQ,GAAG;AACT,UAAMC,WAAW,GAAG,EAApB;;AAEA,SAAK,MAAMC,IAAX,IAAmB,KAAKP,IAAxB,EAA8BM,WAAW,CAACE,IAAZ,CAAiBD,IAAjB;;AAE9B,SAAK,MAAM,GAAGE,GAAH,CAAX,IAAsB,KAAKR,IAA3B,EAAiCK,WAAW,CAACE,IAAZ,CAAiBC,GAAG,CAACJ,QAAJ,EAAjB;;AAEjC,WAAOC,WAAP;AACD;;AAEDI,EAAAA,OAAO,GAAG;AACR,WAAOC,KAAK,CAACC,IAAN,CAAW,KAAKZ,IAAhB,EAAsBa,MAAtB,CAA6BF,KAAK,CAACC,IAAN,CAAW,KAAKX,IAAL,CAAUa,MAAV,EAAX,CAA7B,CAAP;AACD;;AAEDC,EAAAA,UAAU,CAACC,OAAD,EAAU;AAClB,WAAO,KAAKN,OAAL,GAAeO,MAAf,CAAsB,CAACC,GAAD,EAAMC,CAAN,KAAYD,GAAG,CAACL,MAAJ,CAAWhB,SAAS,CAACuB,KAAV,CAAgBD,CAAhB,IAAqBH,OAAO,CAACG,CAAD,CAA5B,GAAkCA,CAA7C,CAAlC,EAAmF,EAAnF,CAAP;AACD;;AAEDE,EAAAA,GAAG,CAACC,KAAD,EAAQ;AACTzB,IAAAA,SAAS,CAACuB,KAAV,CAAgBE,KAAhB,IAAyB,KAAKrB,IAAL,CAAUsB,GAAV,CAAcD,KAAK,CAACE,GAApB,EAAyBF,KAAzB,CAAzB,GAA2D,KAAKtB,IAAL,CAAUqB,GAAV,CAAcC,KAAd,CAA3D;AACD;;AAEDG,EAAAA,MAAM,CAACH,KAAD,EAAQ;AACZzB,IAAAA,SAAS,CAACuB,KAAV,CAAgBE,KAAhB,IAAyB,KAAKrB,IAAL,CAAUwB,MAAV,CAAiBH,KAAK,CAACE,GAAvB,CAAzB,GAAuD,KAAKxB,IAAL,CAAUyB,MAAV,CAAiBH,KAAjB,CAAvD;AACD;;AAEDI,EAAAA,KAAK,GAAG;AACN,UAAMC,IAAI,GAAG,IAAI7B,YAAJ,EAAb;AACA6B,IAAAA,IAAI,CAAC3B,IAAL,GAAY,IAAIE,GAAJ,CAAQ,KAAKF,IAAb,CAAZ;AACA2B,IAAAA,IAAI,CAAC1B,IAAL,GAAY,IAAIE,GAAJ,CAAQ,KAAKF,IAAb,CAAZ;AACA,WAAO0B,IAAP;AACD;;AAEDC,EAAAA,KAAK,CAACC,QAAD,EAAWC,WAAX,EAAwB;AAC3B,UAAMH,IAAI,GAAG,KAAKD,KAAL,EAAb;AACAG,IAAAA,QAAQ,CAAC7B,IAAT,CAAc+B,OAAd,CAAsBT,KAAK,IAAIK,IAAI,CAACN,GAAL,CAASC,KAAT,CAA/B;AACAO,IAAAA,QAAQ,CAAC5B,IAAT,CAAc8B,OAAd,CAAsBT,KAAK,IAAIK,IAAI,CAACN,GAAL,CAASC,KAAT,CAA/B;AACAQ,IAAAA,WAAW,CAAC9B,IAAZ,CAAiB+B,OAAjB,CAAyBT,KAAK,IAAIK,IAAI,CAACF,MAAL,CAAYH,KAAZ,CAAlC;AACAQ,IAAAA,WAAW,CAAC7B,IAAZ,CAAiB8B,OAAjB,CAAyBT,KAAK,IAAIK,IAAI,CAACF,MAAL,CAAYH,KAAZ,CAAlC;AACA,WAAOK,IAAP;AACD;;AApD+B","sourcesContent":["import Reference from '../Reference';\nexport default class ReferenceSet {\n  constructor() {\n    this.list = void 0;\n    this.refs = void 0;\n    this.list = new Set();\n    this.refs = new Map();\n  }\n\n  get size() {\n    return this.list.size + this.refs.size;\n  }\n\n  describe() {\n    const description = [];\n\n    for (const item of this.list) description.push(item);\n\n    for (const [, ref] of this.refs) description.push(ref.describe());\n\n    return description;\n  }\n\n  toArray() {\n    return Array.from(this.list).concat(Array.from(this.refs.values()));\n  }\n\n  resolveAll(resolve) {\n    return this.toArray().reduce((acc, e) => acc.concat(Reference.isRef(e) ? resolve(e) : e), []);\n  }\n\n  add(value) {\n    Reference.isRef(value) ? this.refs.set(value.key, value) : this.list.add(value);\n  }\n\n  delete(value) {\n    Reference.isRef(value) ? this.refs.delete(value.key) : this.list.delete(value);\n  }\n\n  clone() {\n    const next = new ReferenceSet();\n    next.list = new Set(this.list);\n    next.refs = new Map(this.refs);\n    return next;\n  }\n\n  merge(newItems, removeItems) {\n    const next = this.clone();\n    newItems.list.forEach(value => next.add(value));\n    newItems.refs.forEach(value => next.add(value));\n    removeItems.list.forEach(value => next.delete(value));\n    removeItems.refs.forEach(value => next.delete(value));\n    return next;\n  }\n\n}"]},"metadata":{},"sourceType":"module"}